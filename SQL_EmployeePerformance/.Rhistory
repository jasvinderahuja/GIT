endMatch <- str_extract(a, "(?=D)\\d+(?=M)")
endMatch
delMatch <- str_extract(a, "(?=M?)\\d+(?=D)")
delMatch
InsMatch <- str_extract(a, "(?=M?)\\d+(?=I)")
InsMatch
endMatch <- str_extract(a, "(?=D?)\\d+(?=M)")
endMatch
a
endMatch <- str_extract(a, "(?=D?)\\d+(?=M$)")
endMatch
which
which(R)
which(r)
R.home
R.home()
gc()
restart.R
Restart.R
rm(list = ls())
q()
q()
R.Version()
R.home()
install.packages("tidyverse")
install.packages("BiocManager", repos = "https://cloud.r-project.org")
BiocManager::install("Biostrings")
BiocManager::install("ShortRead")
BiocManager::install("dada2")
# BiocManager::install("Biostrings")
# BiocManager::install("ShortRead")
# BiocManager::install("dada2")
library(Biostrings)
library(ShortRead)
# BiocManager::install("ShortRead")
BiocManager::install("ShortRead")
install.packages("deldir")
install.packages("deldir")
BiocManager::install("ShortRead")
library(dada2)
BiocManager::install("dada2")
BiocManager::install("ShortRead")
BiocManager::install("Rsamtools")
BiocManager::install("Rsamtools")
ource("http://bioconductor.org/biocLite.R")
source("http://bioconductor.org/biocLite.R")
?BiocUpgrade
??BiocUpgrade
BiocManager
install.packages("tidyverse")
install.packages("textshaping")
install.packages("usethis", verbose=TRUE)
install.packages("textshaping")
install.packages("tidyverse")
install.packages("ragg")
install.packages("tidyverse")
BiocManager::install("dada2")
BiocManager::install("Rsamtools")
BiocManager::install("Rhtslib")
BiocManager::install("Rhtslib", force = TRUE)
BiocManager::install("Rsamtools")
BiocManager::install("Rsamtools")
BiocManager::install("ShortRead")
BiocManager::install("Rsamtools")
library(Rsamtools)
BiocManager::install("Rsamtools")
BiocManager::install("Rsamtools", force=TRUE)
.libPaths()
BiocManager::install("Rsamtools", force=TRUE)
BiocManager::install("scPipe")
BiocManager::install("Rsamtools", force=TRUE)
BiocManager::install("biocLite")
install.packages("biocLite")
BiocManager::install('grimbough/Rhtslib')
BiocManager::install("remotes")
BiocManager::install('grimbough/Rhtslib')
BiocManager::install('grimbough/Rhtslib')
BiocManager::install('grimbough/Rhtslib')
BiocManager::install("Rsamtools", force=TRUE)
install.packages("pacman")
p_install("Rsamtools")
library(pacman)
p_install("Rsamtools")
remove.packages(Rsamtools)
remove.packages("Rsamtools")
remove.packages("Rsamtools")
p_install("Rsamtools")
remove.packages("Rsamtools")
BiocManager::install('Rhtslib')
BiocManager::install("ShortRead")
R.version
BiocManager::install("ShortRead")
BiocManager::install("ShortRead")
R.version()
R.Version()
.libPaths()
.libPaths(new="/Users/jasvinder/micromamba/lib/R/library")
library(dada2)
knitr::opts_chunk$set(echo = TRUE)
# BiocManager::install("Biostrings")
# BiocManager::install("ShortRead")
# BiocManager::install("dada2")
library(Biostrings)
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("Rsamtools")
BiocManager::install("Rsamtools")
# BiocManager::install("Biostrings")
# BiocManager::install("ShortRead")
# BiocManager::install("dada2")
library(Biostrings)
library(ShortRead)
# BiocManager::install("dada2")
BiocManager::install("dada2")
BiocManager::valid()
BiocManager::install(c(
"ape", "backports", "BH", "Biobase", "BiocGenerics", "bit", "bit64",
"bitops", "blob", "broom", "callr", "car", "caTools", "cli", "clipr",
"coda", "colorspace", "colourpicker", "conquer", "corrplot", "covr",
"cowplot", "crayon", "crosstalk", "curl", "data.table", "DBI", "dbplyr",
"deldir", "DEoptimR", "desc", "devtools", "diffobj", "digest", "diptest",
"DNAcopy", "doParallel", "dplyr", "dqrng", "DT", "e1071", "ellipsis",
"expm", "fansi", "farver", "fastICA", "fastmap", "fitdistrplus", "flexmix",
"forcats", "foreach", "Formula", "fpc", "fs", "future", "future.apply",
"gdtools", "generics", "ggplot2", "ggrepel", "ggridges", "ggsignif", "gh",
"git2r", "globals", "glue", "gplots", "graph", "gtools", "haven", "hdf5r",
"hexbin", "highr", "Hmisc", "hms", "htmlTable", "htmltools", "htmlwidgets",
"httpuv", "httr", "igraph", "isoband", "iterators", "jpeg", "jsonlite",
"knitr", "labeling", "later", "leiden", "lifecycle", "limma", "littler",
"lme4", "lmtest", "lubridate", "magrittr", "maptools", "MatrixModels",
"matrixStats", "mclust", "memoise", "mime", "mvtnorm", "openssl",
"openxlsx", "patchwork", "pbapply", "pbkrtest", "pillar", "pkgbuild",
"pkgKitten", "pkgload", "plotly", "processx", "promises", "proxy", "ps",
"quantreg", "R.methodsS3", "R.oo", "R6", "rappdirs", "RBGL", "rcmdcheck",
"Rcpp", "RcppAnnoy", "RcppArmadillo", "RcppEigen", "RcppParallel", "readr",
"remotes", "reprex", "reticulate", "rio", "rjags", "rlang", "rmarkdown",
"robustbase", "roxygen2", "rprojroot", "rstatix", "rstudioapi", "rsvd",
"rversions", "rvest", "sandwich", "sctransform", "Seurat", "sf", "shiny",
"shinyjs", "sitmo", "slam", "sodium", "sp", "SparseM", "statmod",
"stringi", "svglite", "sys", "systemfonts", "testit", "testthat", "tibble",
"tidyr", "tidyselect", "tidyverse", "tinytex", "units", "usethis", "utf8",
"uwot", "vctrs", "vdiffr", "vegan", "VennDiagram", "VGAM", "viridis",
"viridisLite", "withr", "xfun", "XML", "zip", "zoo"
), update = TRUE, ask = FALSE)
# BiocManager::install("Biostrings")
# BiocManager::install("ShortRead")
# BiocManager::install("dada2")
library(Biostrings)
library(ShortRead)
BiocManager::install("ShortRead")
BiocManager::install("ShortRead")
library(Rsamtools)
BiocManager::install("Rsamtools", force=TRUE)
library(Rsamtools)
BiocManager::install("Rsamtools", type="source")
BiocManager::install()
BiocManager::install("Rsamtools", version = "2.18.0")
BiocManager::install("Rsamtools", version = "2.18")
BiocManager::install("Rsamtools", version = "2.16")
BiocManager::install("Rsamtools", version = "2")
BiocManager::install("Rsamtools", version = 2.18.0)
BiocManager::install(c("GenomicRanges", "Biostrings", "zlibbioc"))
BiocManager::install(c("GenomicRanges", "Biostrings", "zlibbioc"), force=TRUE)
BiocManager::install(c("ShortReads", "dada2"))
BiocManager::install(c("GenomicAlignments"))
library(dada2)
BiocManager::install("dada2")
BiocManager::install(c("GenomicAlignments"))
log(32)
log(32, 2)
log2(32)
install.packages(c("DBI", "RODBC", "odbc", "dplyr", "dbplyr"))
## install.packages(c("DBI", "RODBC", "odbc", "dplyr", "dbplyr"))
## Import required packages
library(DBI)
library(RODBC)
install.packages("RODBC")
library(RODBC)
install.packages("RODBC")
library(RODBC)
library(odbc)
install.packages("odbc")
library(odbc)
library(dplyr)
library(dbplyr)
sort(unique(odbcListDrivers()[[1]]))
conn <- dbConnect(RMySQL::MySQL(),
dbname = "orders",
Server = "localhost",
port = 3306,
user = "root",
password = "Rconnect1")
library(DBI)
library(dplyr)
library(dbplyr)
conn <- dbConnect(RMySQL::MySQL(),
dbname = "orders",
Server = "localhost",
port = 3306,
user = "root",
password = "Rconnect1")
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, connection = "conn")
library(DBI)
library(dplyr)
library(dbplyr)
conn <- dbConnect(RMySQL::MySQL(),
dbname = "orders",
Server = "localhost",
port = 3306,
user = "root",
password = "Rconnect1")
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, connection = "conn")
## Fetch unique regions in the data
```{sql }
## fetch the data of the returned orders
```{sql }
setwd("~/Library/CloudStorage/GoogleDrive-jasvinderahuja@gmail.com/My Drive/Learning/Simplilearn_BA/Simplilearn_SQL/Project_Questions")
customer<-read_csv("customer.csv")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(dplyr)
library(knitr)
customer<-read_csv("customer.csv")
View(customer)
passengers_on_flights<-read_csv("passengers_on_flights.csv")
ticket_details<-read_csv("ticket_details.csv")
routes<-read_csv("routes.csv")
conn <- dbConnect(RMySQL::MySQL(),
dbname = "AirCargoAnalysis.db",
Server = "localhost",
port = 3306,
user = "root",
password = "Rconnect1")
?dbConnect
conn <- dbConnect(RMySQL::MySQL(),
dbname = "",
Server = "localhost",
port = 3306,
user = "root",
password = "Rconnect1")
knitr::opts_chunk$set(echo = TRUE, warning = FALSE)
library(tidyverse)
library(dplyr)
library(knitr)
summary customers
summary(customers)
customers %>% head() %>% kable(caption = "customers")
knitr::opts_chunk$set(echo = TRUE, warning = FALSE)
library(tidyverse)
library(dplyr)
library(knitr)
customers = read_csv("customer.csv", show_col_types = FALSE)
passengers_on_flights = read_csv("passengers_on_flights.csv", show_col_types = FALSE)
ticket_details = read_csv("ticket_details.csv", show_col_types = FALSE)
routes = read_csv("routes.csv", show_col_types = FALSE)
summary(customers)
mypassword="Rconnect1"
conn <- dbConnect(RMySQL::MySQL(),
dbname = "",
Server = "localhost",
port = 3306,
user = "root",
password = mypassword)
knitr::opts_chunk$set(connection = "conn")
glimpse(customers)
max(str_length(first_name))
max(str_length(customers$first_name))
reticulate::repl_python()
install.packages(reticulate)
install.packages("reticulate")
install.packages("reticulate")
reticulate::repl_python()
knitr::opts_chunk$set(echo = TRUE, warning = FALSE)
library(tidyverse)
library(dplyr)
library(knitr)
reticulate::repl_python()
knitr::opts_chunk$set(echo = TRUE, warning = FALSE)
library(tidyverse)
library(dplyr)
library(knitr)
library(reticulate)
reticulate::repl_python()
knitr::opts_chunk$set(echo = TRUE, warning = FALSE)
library(tidyverse)
library(dplyr)
library(knitr)
customers = read_csv("customer.csv", show_col_types = FALSE)
passengers_on_flights = read_csv("passengers_on_flights.csv", show_col_types = FALSE)
ticket_details = read_csv("ticket_details.csv", show_col_types = FALSE)
routes = read_csv("routes.csv", show_col_types = FALSE)
customers %>% head() %>% kable(caption = "customers")
passengers_on_flights %>% head() %>% kable(caption = "passengers_on_flights")
ticket_details %>% head() %>% kable(caption ="ticket_details")
routes %>% head() %>% kable(caption ="routes")
mypassword="Rconnect1"
conn <- dbConnect(RMySQL::MySQL(),
dbname = "",
Server = "localhost",
port = 3306,
user = "root",
password = mypassword)
knitr::opts_chunk$set(connection = "conn")
glimpse(customers)
max(str_length(customers$first_name))
print(paste("first_name max length =", max(str_length(customers$first_name))))
glimpse(customers)
print(paste("first_name max length =", max(str_length(customers$first_name))))
glimpse(customers)
print(paste("first_name max length =", max(str_length(customers$first_name)), ". \n"))
print(paste("first_name max length =", max(str_length(customers$last_name)), ". \n"))
glimpse(customers)
print(paste("first_name max length =", max(str_length(customers$first_name)), ". \n"))
print(paste("first_name max length =", max(str_length(customers$last_name)), ". \n"))
knitr::opts_chunk$set(echo = TRUE, warning = FALSE)
library(tidyverse)
library(dplyr)
library(knitr)
customers = read_csv("customer.csv", show_col_types = FALSE)
passengers_on_flights = read_csv("passengers_on_flights.csv", show_col_types = FALSE)
ticket_details = read_csv("ticket_details.csv", show_col_types = FALSE)
routes = read_csv("routes.csv", show_col_types = FALSE)
customers %>% head() %>% kable(caption = "customers")
passengers_on_flights %>% head() %>% kable(caption = "passengers_on_flights")
ticket_details %>% head() %>% kable(caption ="ticket_details")
routes %>% head() %>% kable(caption ="routes")
mypassword="Rconnect1"
conn <- dbConnect(RMySQL::MySQL(),
dbname = "",
Server = "localhost",
port = 3306,
user = "root",
password = mypassword)
knitr::opts_chunk$set(connection = "conn")
glimpse(customers)
print(paste("first_name max length =", max(str_length(customers$first_name)), ". \n"))
print(paste("first_name max length =", max(str_length(customers$last_name)), ". \n"))
knitr::opts_chunk$set(echo = TRUE, warning = FALSE)
library(tidyverse)
library(dplyr)
library(knitr)
customers = read_csv("customer.csv", show_col_types = FALSE)
passengers_on_flights = read_csv("passengers_on_flights.csv", show_col_types = FALSE)
ticket_details = read_csv("ticket_details.csv", show_col_types = FALSE)
routes = read_csv("routes.csv", show_col_types = FALSE)
customers %>% head() %>% kable(caption = "customers")
passengers_on_flights %>% head() %>% kable(caption = "passengers_on_flights")
ticket_details %>% head() %>% kable(caption ="ticket_details")
routes %>% head() %>% kable(caption ="routes")
mypassword="Rconnect1"
conn <- dbConnect(RMySQL::MySQL(),
dbname = "",
Server = "localhost",
port = 3306,
user = "root",
password = mypassword)
knitr::opts_chunk$set(connection = "conn")
glimpse(customers)
print(paste("first_name max length =", max(str_length(customers$first_name)), ". \n"))
print(paste("first_name max length =", max(str_length(customers$last_name)), ". \n"))
customers
db_insert_into(db_table, customers)
db_insert_into(customers, customers)
?db_insert_into
db_insert_into(conn, customers, customers)
dplyr::db_insert_into(conn, customers, customers)
glimpse(customers)
print(paste("first_name max length =", max(str_length(customers$first_name)), ". \n"))
print(paste("first_name max length =", max(str_length(customers$last_name)), ". \n"))
dplyr::db_insert_into(conn, customer, customers)
dbplyr::db_insert_into(conn, customer, customers)
library(dplyr)
library(dbplyr)
db_insert_into(conn, customer, customers)
library(DBI)
library(dplyr)
library(dbplyr)
conn <- dbConnect(RMySQL::MySQL(),
dbname = "",
Server = "localhost",
port = 3306,
user = "root",
password = mypassword)
mypassword="Rconnect1"
library(DBI)
library(dplyr)
library(dbplyr)
conn <- dbConnect(RMySQL::MySQL(),
dbname = "",
Server = "localhost",
port = 3306,
user = "root",
password = mypassword)
knitr::opts_chunk$set(connection = "conn")
routes <- read_csv("routes.csv")
routes$aircraft_id %>% length() %>% max()
routes$aircraft_id %>% str_length() %>% max()
passengers_on_flights <- read_csv("passengers_on_flights.csv")
glimpse(routes)
routes <- dbGetQuery(conn, SELECT * FROM routes) %>%
routes_distinct <- dbGetQuery(conn, "SELECT * FROM routes") %>%
select(route_id, origin_airport, destination_airport, aircraft_id) %>%
distinct()
routes_distinct
glimpse(routes_distinct)
passengers_on_flights_distinct <- dbGetQuery(conn, "SELECT * FROM passengers_on_flights")
glimpse(passengers_on_flights_distinct)
passengers_on_flights_distinct <- dbGetQuery(conn, "SELECT * FROM passengers_on_flights") %>%
select(route_id, origin_airport = depart, destination_airport = arrival, aircraft_id)
passengers_on_flights_distinct <- dbGetQuery(conn, "SELECT * FROM passengers_on_flights") %>%
select(route_id, origin_airport = depart, destination_airport = arrival, aircraft_id) %>%
distinct()
passengers_on_flights_distinct <- dbGetQuery(conn, "SELECT * FROM passengers_on_flights") %>%
group_by(route_id, origin_airport = depart, destination_airport = arrival, aircraft_id) %>%
tally(name="n_passengers")
routes_distinct <- dbGetQuery(conn, "SELECT * FROM routes") %>%
group_by(route_id, origin_airport, destination_airport, aircraft_id) %>%
tally(name="n_routes")
passengers_on_flights_distinct <- dbGetQuery(conn, "SELECT * FROM passengers_on_flights") %>%
group_by(route_id, origin_airport = depart, destination_airport = arrival, aircraft_id) %>%
tally(name="n_passengers")
View(routes_distinct)
View(passengers_on_flights_distinct)
routes_passengers <- full_join(routes_distinct, passengers_on_flights_distinct)
routes_passengers <- full_join(routes_distinct, passengers_on_flights_distinct,
by = join_by(route_id, origin_airport, destination_airport, aircraft_id))
View(routes_passengers)
routes_passengers %>% glimpse()
routes_passengers %>%
filter(is.na(n_routes)) %>%
kable()
routes_passengers %>%
filter(is.na(n_routes)) %>%
kable() %>%
kable_styling()
routes_passengers %>%
filter(is.na(n_routes)) %>%
kable()
routes
glimpse(routes)
routes_passengers %>%
filter(is.na(n_routes))
install.packages("geosphere")
routes_passengers <- full_join(routes_distinct, passengers_on_flights_distinct,
by = join_by(route_id, origin_airport, destination_airport, aircraft_id))
glimpse(routes)
routes_passengers %>%
filter(is.na(n_routes))
routes_passengers %>%
filter(is.na(n_routes)) %>% glimpse()
glimpse(passengers_on_flights)
glimpse(routes)
passengers_on_flights$flight_num %>% str_length() %>% max()
passengers_on_flights$flight_num %>% str_length() %>% min()
glimpse(passengers_on_flights)
ticket_details <- read_csv("ticket_details.csv")
ticket_details %>% glimpse()
getwd()
list.files()
1. Create an ER diagram for the given airlines database.
![The EER diagram for Air Cargo Analysis]("images/AirCargoAnalysisInSQL_EER.png")
![The EER diagram for Air Cargo Analysis](images/AirCargoAnalysisInSQL_EER.png)
list.files()
list.files("images/")
passengers_on_flights
glimpse(passengers_on_flights)
knitr::opts_chunk$set(echo = TRUE)
mypassword="Rconnect1"
library(DBI)
library(dplyr)
library(dbplyr)
conn <- dbConnect(RMySQL::MySQL(),
dbname = "",
Server = "localhost",
port = 3306,
user = "root",
password = mypassword)
knitr::opts_chunk$set(connection = "conn")
library(DBI)
library(dplyr)
library(dbplyr)
conn <- dbConnect(RMySQL::MySQL(),
dbname = "",
Server = "localhost",
port = 3306,
user = "root",
password = mypassword)
knitr::opts_chunk$set(connection = "conn")
library(DBI)
library(dplyr)
library(dbplyr)
## mypassword = {}!
conn <- dbConnect(RMySQL::MySQL(),
dbname = "",
Server = "localhost",
port = 3306,
user = "root",
password = mypassword)
knitr::opts_chunk$set(connection = "conn", echo = TRUE)
setwd("~/Documents/GIT/Data_Analysis_Projects/SQL_EmployeePerformance")
list.files()
library(DBI)
library(dplyr)
library(dbplyr)
## mypassword = {}!
conn <- dbConnect(RMySQL::MySQL(),
dbname = "",
Server = "localhost",
port = 3306,
user = "root",
password = mypassword)
knitr::opts_chunk$set(connection = "conn", echo = TRUE)
